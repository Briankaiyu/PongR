Rethink the clients in terms of percent: when i update the ball position, I have to think in terms of % and not pixel.
For every step I need to increment the X and Y by 1%, and 1% is 5 pixel, then i finally increment x and y by 5 pixel.
This way I can have a consistent simulation both on the server and the clients, disregard their screen dimension.
Clients and server communicate in terms of %, internally they think in terms of pixel!

Reference field dimension on the server = 1000 (width) * 600 (height) px
So everything should be expressed in terms of percentage: 

Fixed gap -> 30px ==> (30/600) * 100 = 5%

Ball -> radius = 10px ==> (20/1000) * 100 = 1%
	 -> center coordinates (50,50) , in the middle of the field
	 -> fixed step = 10 px ==> (5/1000) * 100 = 1%

Player 1 -> BAR_SCROLL_UNIT = 5px ==> (5/600) * 100 = 1%
		 -> bar height = 16% ==>  x:600 = 16:100 => x = (16*600) / 100 ==> height = 96px
		 -> bar width = 3% ==> width = 30 px 
		 -> BarMarginTop = 42% (50 - (height/2)) = 252px
		 -> TopLeftVertex = 5% gap from left delimiter ==> 50px;



--------------------------------------------------

- Write code that handles server updates
- Write unit tests for the Models
- Write unit tests for the modified keyboard.js 
- Buffer inputs if we the client keeps the button pressed

Old functions yet to be implemented from old version of Logic.js

//PRIVATE -
    function hideGoalMessage() {
        $("#messageContainer").text("");
        $("#messageContainer").css("visibility", "hidden");
    }

    // PRIVATE - Updates the score in the internal state of the app. Any change will be automatically reflected in the UI thanks to Knockout
    function updateScore(playerNameWhoScored) {
        var oldScore;
        if (app.player1.user.username() === playerNameWhoScored) {
            oldScore = app.player1.score();
            app.player1.score(oldScore + 1);
        }
        else {
            oldScore = app.player2.score();
            app.player2.score(oldScore + 1);
        }
    }

    // To be modified
    // 1: Clean timer and keyboard event handler    
    // 2: the player who scored send a message to the server to notify the new score. The server replies with the new ball direction to both players
    function restartGameAfterGoal() {
        var playerName = getNameOfPlayerWhoScored();
        // step 0
        //myPongR.clearAnimation(requestAnimationFrameRequestId);
        //myPongR.removeKeyboardEventListener();
        //myPongR.clearPositionNotificationInterval(serverNotificationIntervalId);
        // step 1 
        //displayGoalMessage(playerName);
        //updateScore(playerName);
        // step 2
        //resetAllPositionsToInitialState();
        // step 3
        if (me.user.username() === playerName) {
            notifyServerOnGoal(playerName);
        }
    }

       

    myPongR.resetObjectsPositionToInitialState = function () {
        resetAllPositionsToInitialState();
    };

    // TODO: To be modified
    // PRIVATE - Reset players and ball position to initial state 
    function resetAllPositionsToInitialState() {
        app.player1.barMarginTop(37);
        app.player2.barMarginTop(37);
        $("#player1-bar").css("top", "37%");
        $("#player2-bar").css("top", "37%");
        ball.style.left = "49%";
        ball.style.top = "54%";
        var element = $("#ball")[0];
        var tempPoint = getElementTopLeftVertex(element);
        app.ball.position.x = tempPoint.x - app.ball.radius;
        app.ball.position.y = tempPoint.y - app.ball.radius;
        app.player1.topLeftVertex = getElementTopLeftVertex($("#player1-bar")[0]);
        app.player2.topLeftVertex = getElementTopLeftVertex($("#player2-bar")[0]);
        myOldMarginTop = ko.utils.unwrapObservable(me.barMarginTop);
    }

    // PUBLIC
    myPongR.displayGoalMessage = function (playerName) {
        $("#messageContainer").text("Goal for " + playerName + "!");
        $("#messageContainer").css("visibility", "visible");
        window.setTimeout(hideGoalMessage, 1000);
    };

    // PUBLIC - Updates the score in the internal state of the app. Any change will be automatically reflected in the UI thanks to Knockout
    myPongR.updateScore = function (playerNameWhoScored) {
        var oldScore;
        if (app.player1.user.username() === playerNameWhoScored) {
            oldScore = app.player1.score();
            app.player1.score(oldScore + 1);
        }
        else {
            oldScore = app.player2.score();
            app.player2.score(oldScore + 1);
        }
    }








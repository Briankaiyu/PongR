@{
    ViewBag.Title = "PongR";
}

@if (false) { 
    <script src="../../Scripts/jquery-1.8.0-vsdoc.js" type="text/javascript"></script>
    <script src="../../Js/pongR.js" type="text/javascript"></script>
    <script src="../../Js/viewModel.js" type="text/javascript"></script>
    <script src="../../Js/logic.js" type="text/javascript"></script>
    <script src="../../Scripts/knockout-2.1.0.js" type="text/javascript"></script>
}
<!-- Contains players' name and the score -->

<div id="header">
    <div class="player-info-container">
        <div id="player1-info" class="player-info">
            <ul>
                <li id="player1-name" data-bind="text: player1.user.username"></li>
                <li id="player1-score" class="player-score" data-bind="text: player1.score"></li>
            </ul>            
        </div>
    </div>
    <div id="vs"><div>VS</div></div>
    <div class="player-info-container">
        <div id="player2-info" class="player-info">
            <ul>
                <li id="player2-name" data-bind="text: player2.user.username"></li>
                <li id="player2-score" class="player-score" data-bind="text: player2.score"></li>
            </ul>
        </div>
    </div>
</div>

<!-- Contains the play field -->

<div id="fieldContainer">    
    <div id="player1-field" class="field">
        <div id="player1-goal" class="player-goal"></div>
        <div id="player1-area" class="player-area">
            <div id="player1-bar" class="player-bar initial-position"
                data-bind="style: { top: getMarginTop(player1) }"></div>  
        </div>             
    </div>        
    <div id="player2-field" class="field">
        <div id="player2-goal" class="player-goal"></div>
        <div id="player2-area" class="player-area">
            <div id="player2-bar" class="player-bar initial-position"
                data-bind="style: { top: getMarginTop(player2) }"></div> 
        </div>  
    </div>    
</div>

<div id="ball" class="ball"></div>
<div id="messageContainer"></div>


<!-- Footer 
<div id="footer">

</div> -->

<!-- 
This script reference is important because navigating to /signalr/hubs will automatically generate the script. 
This should be done via an HttpModule automatically generated by SignalR on the server side 
https://github.com/SignalR/SignalR/wiki/SignalR-JS-Client-Hubs
If you navigate to signalr/hubs in your browser, you'll see a script that is dynamically generated based on the hubs declared
on the server. Each hub on the server will become a property on the client side $.connection, e.g. $.connection.myHub.
 -->
<script type="text/javascript" src="@Url.Content("/signalr/hubs")"></script>  
<script type="text/javascript" src="@Url.Content("~/Js/pongR.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Js/viewModel.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Js/logic.js")"></script>
<script type="text/javascript">
    
    var pongRHub;
    var app;
    var me; // indicates which of the two player I am

    //var fps = 60 // frames per second
    var fps = 40; 
    var processStateTimeoutFrequency = 1000 / fps;
    var processStateTimeout;        
    var ball = document.querySelector('#ball');

    function clearAnimationTimeout(timeout) {
        window.clearInterval(timeout); 
    };

    function removeKeyboardEventListener() {
        document.removeEventListener("keydown", pongR.animateMyBar, false);
    };

    function setAnimationTimeout(animationFunction, frequency) {
        return  window.setInterval(animationFunction, frequency);   
    };

    function setKeyboardEventListener() {
        document.addEventListener("keydown", pongR.animateMyBar, false);
    };

    $(document).ready(function () {
        // Proxy creation
        pongRHub = $.connection.pongRHub;
        pongRHub.username = @Html.Raw(Json.Encode(Model));
        
        pongRHub.opponentLeft = function() {
            alert("Opponent left. Going back to wait list");            
            clearAnimationTimeout(processStateTimeout);            
            removeKeyboardEventListener();
            // TODO Implement a method that resets the game: names, score, objects position (resetAllPositionsToInitialState())
        };

        // Function invoked when the user has to wait for an opponent
        pongRHub.wait = function() {
            // TODO: Use a lightbox to display a waiting message
            alert("Wait. Do nothing.");
        };       
        
        // SignalR notifies this client of the opponent new position
        pongRHub.updatePosition = function(player) {
            var playerToUpdate;
            if (player.playerNumber === 1) {
                playerToUpdate = app.player1;
            }
            else {
                playerToUpdate = app.player2;
            }
            playerToUpdate.barDirection = player.barDirection;
            playerToUpdate.barMarginTop(player.barMarginTop);
            playerToUpdate.topLeftVertex = player.topLeftVertex;
        };

        pongRHub.startMatch = function(opts) {
            // TODO: Populate all the view models and do the binding with knockout.
            // Set the timeout to compute game state and for notifying bars position
            // Set event handlers for keystrokes keyUp and KeyDown
            // Start to animate the ball
            pongR.setupMatch(opts);                                               
                        
            setKeyboardEventListener();
            processStateTimeout = setAnimationTimeout(pongR.processState, processStateTimeoutFrequency);            
        };

        pongRHub.continueMatchAfterGoal = function(opts) {
            app.ball.direction = opts.BallDirection;
            if (opts.BallDirection === "left") {
                app.ball.angle = 180;
            }
            else {
                app.ball.angle = 0;
            }
            setKeyboardEventListener();
            processStateTimeout = setAnimationTimeout(pongR.processState, processStateTimeoutFrequency);
        };

        // Step 1: Start the connection        
        // Step 3: Join the system
        $.connection.hub.start()
                    .done(function () {
                        pongRHub.joined();
                    });
                    
    });

</script>